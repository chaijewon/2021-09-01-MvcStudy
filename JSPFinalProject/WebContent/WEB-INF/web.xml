<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>JSPFinalProject</display-name>
  <!-- Controller 등록 (스프링,스트럿츠:서블릿 => URL에 따라 톰캣이 호출) -->
  <!-- web.xml : 톰캣이 읽어 가는 설정 파일 
       => Controller 등록 
       => error 등록 
       => 한글 변환 <filter>
   -->
  <!-- 
            분석
       1) web.xml : 프레임워크 (라이브러리)
                   스프링  : DispatcherServlet
                  스트럿츠 : FilterDispatcher
          ===========================
                    클래스 등록 : 스프링 => application-context.xml 
                             application-datasource.xml
                                       스츠럿츠 => config.xml
       2) Model class => DAO class => JSP
   -->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>com.sist.controller.DispatcherServlet</servlet-class>
    <!-- XML의 경로를 넘겨준다  -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>application-context.xml</param-value>
    </init-param>
  </servlet>
  <!-- 
           서블릿 동작 
           1) 메모리 할당 (생성자 호출) 
           2) init호출 (한번만 호출) => 프로그램 실행중에만 한번 호출 
           3) 사용자 요청한 내용 처리 
              ================
                          사용자가 요청시마다 호출(브라우저 주소) => 서버와 연결하는 부분은 주소창 
              service() ==> 항상 URL주소는 .do를 유지한다 
           public class DisapatherServlet extends HttpServlet
           {
              public void init(ServletConfig config)
              {
                 // Model클래스 찾기 (Model=Menu)
                                메뉴확인 :appication-context.xml
                 String path=config.getInitParameter("contextConfigLocation");
                                
              }
              public void service(HttpServletRequest request,HttpServletResponse response)
              {
                 // 사용자 입장 (식탁)
                 // 메뉴 => .do   ==> list.do
                 // 주방에서 만든다 (request)
                 // 사용자에게 음식을 보낸다 (forward) , sendRedirect() : 배달
                 
              }
           }
   -->
  <servlet-mapping>
     <servlet-name>dispatcher</servlet-name>
     <url-pattern>*.do</url-pattern><!-- 개발자 정한다 -->
  </servlet-mapping>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>